#+Title: Clojure
#+Author: lvh
#+Email: _@lvh.io

#+OPTIONS: toc:nil reveal_rolling_links:nil num:nil reveal_history:true
#+REVEAL_TRANS: linear
#+REVEAL_THEME: lvh

* Introduction

** Who am I?

   #+ATTR_HTML: :style width:80%
   [[./media/lvh.svg]]

   #+BEGIN_NOTES
   * Software engineer (distributed systems, infosec)
   #+END_NOTES

** KUL

   [[./media/KUL.gif]]

** Rackspace

   #+ATTR_HTML: :style width:90%
   [[./media/Rackspace.svg]]

** Python

   #+ATTR_HTML: :style border:none
   [[./media/Python.svg]]

   #+BEGIN_NOTES
   Fellow of the Python Software Foundation
   Staff member of PyCon US
   #+END_NOTES

** More importantly: Clojure!

   #+ATTR_HTML: :style border:none
   [[./media/Clojure.png]]

** Who are /you/?

   * Functional programming?
     * HOF? ~map~, ~filter~, ~reduce~?
   * Lisps?
   * Clojure?

* Hello, Clojure!
** What's Clojure?

   ~(apply modern-lisp @jvm)~

   #+BEGIN_NOTES
   Official JS target, semi-mature CLR target, various experimental targets
   #+END_NOTES

** Homoiconic syntax

   ~(f a b c)~

   just a different spelling for:

   ~f(a, b, c)~

** A lisp? Really?

   #+ATTR_HTML: :style width:100%
   [[./media/JohnMcCarthy.jpg]]

   #+BEGIN_NOTES
   Originally written for AI
   John McCarthy 1957
   Interpreters, high-level metaprogramming, garbage collection, dynamic programming, functional programming, programming with recursive functions...
   #+END_NOTES

** What's so nice about it?

   Lots of reasons:

   #+ATTR_REVEAL: :frag roll-in
   * Immutability & functional programming
   * JVM, but also JS back-ends
   * "Just /do/ it already" (my favorite)
   * ...

** Just do it already

   (Partial) static typing

   #+ATTR_REVEAL: :frag roll-in
   * Python: talking about it forever
     #+ATTR_REVEAL: :frag roll-in
     * Annotation syntax is enough, right?
     * Finally going to make it in 3.whatever
   * Clojure: ~core.typed~

** Just do it already

   Software transactional memory

   #+ATTR_REVEAL: :frag roll-in
   * Python: 8 working prototypes
     #+ATTR_REVEAL: :frag roll-in
     * ~2x slowdown from regular Python
     * Some of the smartest people on it
     * Difficult because Python is hard to optimize
   * Clojure: STM since 1.0

** Just do it already

   Asynchronous programming

   #+ATTR_REVEAL: :frag roll-in
   * Python: asyncio
     #+ATTR_REVEAL: :frag roll-in
     * (caveat: I am the original author of async-pep)
     * Yay! Yet another event loop framework!
   * Clojure: core.async
     #+ATTR_REVEAL: :frag roll-in
     * Supports both threads & IOC
     * Goroutines? Library, not language feature

** Just do it already

   Logic programming

   #+ATTR_REVEAL: :frag roll-in
   * Python: bunch of weekend hacks
   * Clojure: popular library

** Not about Python

   Most other languages are the same or worse

** Ball of mud

   Lisp is a ball of mud

   $LANG is a shiny diamond

   #+BEGIN_NOTES
   Usually not considered a compliment
   But hopefully I've piqued your interest
   #+END_NOTES


* Big ideas

** Immutability by default

   * Default types are immutable
   * You can alway import ~ArrayList~
   * ... unfortunately also ~Date~ :-(

** Functional programming

   "85% functional"

** Java interoperability

** Decomplection

*** Complex

    #+ATTR_REVEAL: :frag roll-in
    * Does many things
    * Related to, but ≠ hard!

*** Simple

    #+ATTR_REVEAL: :frag roll-in
    * Does one thing
    * Related to, but ≠ easy!

* The value of values

** Values /are/ immutable!

   #+BEGIN_NOTES
   Not just in Clojure; *semantically*, mutable values are lies
   #+END_NOTES

** "Can't cross the same river twice"

   (Heraclitus, ~500 BC)

** "Single" values

   #+ATTR_REVEAL: :frag roll-in
   * Java: ~BigInt~, ~BigDecimal~...
   * Python: ~int~, ~float~...
   * Counterexample: ~java.util.Date~

** We've made a terrible mistake!

   12 Jan 1991, 18 Mar 2002

   How many dates?

   #+ATTR_REVEAL: :frag roll-in
   * Two!
   * In Java?
     * Take a ~Date~, change day, month, year
     * Same ~Date~, different date!
     * Why do we accept this?

** Maybe I'm overreacting

   #+ATTR_REVEAL: :frag roll-in
   * Most people agree ~Date~ was a mistake
     * Bloch has apologized for it profusely
   * Most people agree immutable types are good
     * Numerics, strings...
   * ... but mutability is still the default!
     * ~someObject.setWhatever~

** "Compound" values

   E.g. collections

   #+ATTR_REVEAL: :frag roll-in
   * Java: ArrayList, Hash(Set|Map)
   * Python: list, set, map...
   * Counterexample: tuple

   #+BEGIN_NOTES
   For some reason we don't accept this for compound values
   #+END_NOTES

** We have made a terrible mistake!

   {3, 5}, {3, 5, 7}

   How many sets?

   #+ATTR_REVEAL: :frag roll-in
   * Two!
   * In Java? (and Python, and...)
     * Take a ~HashSet~, add/remove some elements
     * Same ~Set~, different set!
     * Why do we accept this?

** Why are we here?

   Imperative programming has no concept of /time/

** Value, identity, state

   [[./media/ValueIdentityState.svg]]

** Recap

   * Things don't change in place
   * The future is a function of the past
     * The future does not /change/ the past
   * Concurrency makes everything worse

** Persistent data structures

   * Not about persisting to a database
   * Specific way of implementing immutable data structures
   * Given ~x~, ~(f x)~, will give you a /new/ data structure

** Performance?

   * Typically not an issue
     * JVM is an impressive piece of engineering
   * Modern persistent data structures are quite efficient
   * There's always options:
     * ~transient~, ~persistent!~
     * import a faster Java alternative

** Performance is often /better/

   * E.g. pointer equality checks
   * Example: Om beating React.js

** New possibilities

   Old versions are cheap!

   * Easy-to-implement undo
   * Time travel
   * Speculative evaluation

** How does it actually work?

   Bit-partitioned hash tries

** Bit partitioning

   [[./media/BitPartition.svg]]

** Hash trie

   #+ATTR_HTML: :style width:40%;display:block;margin-left:auto;margin-right:auto
   [[./media/BitPartitionPart.svg]]

   #+ATTR_HTML: :style width:50%
   [[./media/HashTrie.svg]]

** Path copying

   #+ATTR_HTML: :style width:50%
   [[./media/HashTrieWithAssoc.svg]]

** How deep does it go?

   | Depth | Nodes |
   |     0 | 32    |
   |     1 | 1024  |
   |     2 | ~32k  |
   |     3 | ~1M   |
   |     4 | ~32M  |

** Garbage-efficient

   #+ATTR_HTML: :style width:50%
   [[./media/HashTrieGarbage.svg]]

* Transducers
** Fairly new feature

   (1.7, beta)

** Only bad part is the name

   #+ATTR_REVEAL: :frag roll-in
   * What's a transducer?
     * It's a reducing function transformer!
   * What's a reducing function?
     * It's a function you'd pass to reduce!
   * Gee, thanks!

** Monads

   Just monoids in the category of endofunctors!

   #+BEGIN_NOTES
   My spell checker is not convinced these are words
   #+END_NOTES

** ~map~

   ~(map f coll)~

   (~(f x)~ for all ~x~ in ~coll~)

   ~(map inc [1 2 3]) ;; => (2 3 4)~

** ~filter~

   ~(filter f coll)~

   (all of the ~x~ in ~coll~, if ~(f x)~)

   ~(filter even? [1 2 3]) ;; => (2)~

** ~reduce~

   ~(defn sum [coll] (reduce + coll))~

** Problem!

   We kept implementing ~map~, ~reduce~, etc.

   * Collections (the ones we just saw)
   * Streams
   * Observables
   * Channels (core.async)

** Big idea

   * Extract the /essence/ of map, reduce...
   * Specifically, remove collections
   * Turn them into /process transformations/
   * Very "functional"

** Processes

   * Succession of steps
   * Each step takes an input
   * Example: building a collection
   * Generally: seeded left reduce

** Example with map

   ~(map f)~

   * Compare ~(map f coll)~

** Big example

   +Stole+ Borrowed from Rich Hickey at Strange Loop

* Concurrency
** STM

   #+ATTR_REVEAL: :frag roll-in
   * Software transactional memory
   * Transactions (ACI, not D)
   * Backed by MVCC

   #+BEGIN_NOTES
   Transactions: atomicity, consistency, isolation (not durability)
   Since Clojure 1.0
   #+END_NOTES

** STM example

** ~@Raw~

   #+BEGIN_NOTES
   Not complaining about Steegmans or his class
   He's a great guy, hates giving that class in Java as much as we hated getting it in Java
   But @Raw makes me sad
   #+END_NOTES

** Need a synchronization primitive?

   #+ATTR_HTML: :style width:90%
   [[./media/whynotzoidberg.png]]

** Locks are /incredibly/ hard to use

   #+ATTR_REVEAL: :frag roll-in
   * Very tricky to reason about
     #+ATTR_REVEAL: :frag roll-in
     * Deadlock free?
     * Livelock free?
     * Are you /sure/?
   * Some patterns are easy, but inefficient
     * Example: GIL
   * Requires extensive error handling
     * Yay, orphaned locks
   * Worst part: often /looks/ like it's working
     * ... even when the program is totally incorrect

** Failure modes

    #+ATTR_REVEAL: :frag roll-in
    * ~Segmentation fault~
    * Data corruption
    * Silent data corruption

** Comparison

    Manual memory management

    versus

    GC and lifetime analysis

* Macrology
** Code ≡ data

   Many basic "language features" are macros:

   ~defn~, ~and~, ~cond~...

   (Just like Racket)

** Domain specific languages

   * Default Lisper behavior

* Polymorphism
** Protocols
** Multimethods

** ~x.m(a, b, c)~

   Which ~m~?

** ~m~ depends on type of ~x~

   * Single dispatch
   * Java, C++, C#...

   #+BEGIN_NOTES
   C# 4.0 apparently supports multimethods
   #+END_NOTES

** Python: bit more complicated

   Not just type of ~x~, but the value of ~x.m~

   * Override ~x.m~ on the instance
   * ~__getattr(ibute)__~ hacks

   ~x~ still picks the ~m~!

** "Sending a message"

   (Smalltalk parlance)

   ~x~ ← ~m(a, b, c)~

** No interesting differences

   * Logic is fixed
   * Always up to ~x~

** We can do better!

** Multimethods

   Routing logic: ~f(x)~

** Example

   TODO: show examples in icecap

* ~core.logic~

** The Reasoned Schemer

   [[./media/ReasonedSchemer.jpg]]

* Conclusion
** A modern, pragmatic Lisp

** Don't learn Clojure!

   Going back is painful ;-)

* Thank you!
* Questions?
** Suggested rants

   Bad type systems

   * Scala: ~def map[B, That](f: A => B)(implicit bf:
     CanBuildFrom[Repr, B, That]): That~
   * Go: ~interface{}~
