#+Title: Clojure
#+Author: lvh
#+Email: _@lvh.io

#+OPTIONS: toc:nil reveal_rolling_links:nil num:nil reveal_history:true
#+REVEAL_TRANS: linear
#+REVEAL_THEME: simple

* Introduction
** Who am I?

   #+ATTR_HTML: :style border:none;width:80%
   [[./media/lvh.svg]]

   #+BEGIN_NOTES
   * Software engineer (distributed systems, infosec)
   #+END_NOTES

** Rackspace

   #+ATTR_HTML: :style border:none
   [[./media/rackspace.svg]]

** Python

   #+ATTR_HTML: :style border:none
   [[./media/python.svg]]

   #+BEGIN_NOTES
   Fellow of the Python Software Foundation
   #+END_NOTES

** More importantly: Clojure!

   #+ATTR_HTML: :style border:none
   [[./media/clojure.png]]

** Who are /you/?

   * Experience with FP? Lisps? Clojure?

** What's Clojure?

   ~(apply modern-lisp @jvm)~

   #+BEGIN_NOTES
   Official JS target, various experimental targets
   #+END_NOTES

* Big ideas

** Immutability by default

   * Default types are immutable
   * You can alway import ~ArrayList~
   * unfortunately also ~Date~ :-(

** Functional programming

   "85% functional"

** Java interoperability

* The value of values

** Values /are/ immutable!

   #+BEGIN_NOTES
   Not just in Clojure; *semantically*, mutable values are lies
   #+END_NOTES

** "No-one can cross the same river twice"

** "Simple" values

   * Java: ~BigInt~, ~BigDecimal~...
   * Python: ~int~, ~float~...

** "Complex" values

   E.g. collections

   * Java: ~ArrayList~, ~HashSet~, ~HashMap~...
   * Python: list, set, map...

   #+BEGIN_NOTES
   For some reason we don't accept this for complex values
   #+END_NOTES

* Concurrency

** STM

   Transactions (ACI, not D)

   #+BEGIN_NOTES
   Transactions: atomicity, consistency, isolation (not durability)
   Since Clojure 1.0
   #+END_NOTES

** STM example

** ~@Raw~

   #+BEGIN_NOTES
   Not complaining about Steegmans or his class
   He's a great guy, hates giving that class in Java as much as we hated getting it in Java
   But @Raw makes me sad
   #+END_NOTES

* Macrology

** Code â‰¡ data

   Many basic "language features" are macros:

   ~defn~, ~if~, ~and~...

   (Just like Racket)

** Domain specific languages

   * Default Lisper behavior

* Polymorphism
** Protocols
** Multimethods
* ~core.logic~

** The Reasoned Schemer

   [[./media/reasonedschemer.jpg]]

* Questions?
